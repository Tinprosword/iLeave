//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace WebServiceLayer.WebReference_WorkflowPN {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ILeave_workflowPNSoap", Namespace="http://tempuri.org/")]
    public partial class ILeave_workflowPN : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback InsertPN_ApplyLeaveOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertPNOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ILeave_workflowPN() {
            this.Url = global::WebServiceLayer.Properties.Settings.Default.WebServiceLayer_WebReference_WorkflowPN_ILeave_workflowPN;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event InsertPN_ApplyLeaveCompletedEventHandler InsertPN_ApplyLeaveCompleted;
        
        /// <remarks/>
        public event InsertPNCompletedEventHandler InsertPNCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertPN_ApplyLeave", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] InsertPN_ApplyLeave(int requestid) {
            object[] results = this.Invoke("InsertPN_ApplyLeave", new object[] {
                        requestid});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void InsertPN_ApplyLeaveAsync(int requestid) {
            this.InsertPN_ApplyLeaveAsync(requestid, null);
        }
        
        /// <remarks/>
        public void InsertPN_ApplyLeaveAsync(int requestid, object userState) {
            if ((this.InsertPN_ApplyLeaveOperationCompleted == null)) {
                this.InsertPN_ApplyLeaveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertPN_ApplyLeaveOperationCompleted);
            }
            this.InvokeAsync("InsertPN_ApplyLeave", new object[] {
                        requestid}, this.InsertPN_ApplyLeaveOperationCompleted, userState);
        }
        
        private void OnInsertPN_ApplyLeaveOperationCompleted(object arg) {
            if ((this.InsertPN_ApplyLeaveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertPN_ApplyLeaveCompleted(this, new InsertPN_ApplyLeaveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertPN", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertPN(int applicationType, int requestid, int ReceiverUID, string MessageBody) {
            object[] results = this.Invoke("InsertPN", new object[] {
                        applicationType,
                        requestid,
                        ReceiverUID,
                        MessageBody});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertPNAsync(int applicationType, int requestid, int ReceiverUID, string MessageBody) {
            this.InsertPNAsync(applicationType, requestid, ReceiverUID, MessageBody, null);
        }
        
        /// <remarks/>
        public void InsertPNAsync(int applicationType, int requestid, int ReceiverUID, string MessageBody, object userState) {
            if ((this.InsertPNOperationCompleted == null)) {
                this.InsertPNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertPNOperationCompleted);
            }
            this.InvokeAsync("InsertPN", new object[] {
                        applicationType,
                        requestid,
                        ReceiverUID,
                        MessageBody}, this.InsertPNOperationCompleted, userState);
        }
        
        private void OnInsertPNOperationCompleted(object arg) {
            if ((this.InsertPNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertPNCompleted(this, new InsertPNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertPN_ApplyLeaveCompletedEventHandler(object sender, InsertPN_ApplyLeaveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertPN_ApplyLeaveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertPN_ApplyLeaveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertPNCompletedEventHandler(object sender, InsertPNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertPNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertPNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591