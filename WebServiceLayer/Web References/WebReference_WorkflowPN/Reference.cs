//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace WebServiceLayer.WebReference_WorkflowPN {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ILeave_workflowPNSoap", Namespace="http://tempuri.org/")]
    public partial class ILeave_workflowPN : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback InsertPN_ApplyLeaveOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertPN_ApproveLeaveOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertPN_CancelLeaveOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertPN_ApproveCancelLeaveOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertPN_ApplyCLOTOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertPN_ApproveRejectCLOTOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertPN_CancelCLOTOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertPN_ApproveRejectCancelCLOTOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPendingPnOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetPendingPnSendOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ILeave_workflowPN() {
            this.Url = global::WebServiceLayer.Properties.Settings.Default.WebServiceLayer_WebReference_WorkflowPN_ILeave_workflowPN;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event InsertPN_ApplyLeaveCompletedEventHandler InsertPN_ApplyLeaveCompleted;
        
        /// <remarks/>
        public event InsertPN_ApproveLeaveCompletedEventHandler InsertPN_ApproveLeaveCompleted;
        
        /// <remarks/>
        public event InsertPN_CancelLeaveCompletedEventHandler InsertPN_CancelLeaveCompleted;
        
        /// <remarks/>
        public event InsertPN_ApproveCancelLeaveCompletedEventHandler InsertPN_ApproveCancelLeaveCompleted;
        
        /// <remarks/>
        public event InsertPN_ApplyCLOTCompletedEventHandler InsertPN_ApplyCLOTCompleted;
        
        /// <remarks/>
        public event InsertPN_ApproveRejectCLOTCompletedEventHandler InsertPN_ApproveRejectCLOTCompleted;
        
        /// <remarks/>
        public event InsertPN_CancelCLOTCompletedEventHandler InsertPN_CancelCLOTCompleted;
        
        /// <remarks/>
        public event InsertPN_ApproveRejectCancelCLOTCompletedEventHandler InsertPN_ApproveRejectCancelCLOTCompleted;
        
        /// <remarks/>
        public event GetPendingPnCompletedEventHandler GetPendingPnCompleted;
        
        /// <remarks/>
        public event SetPendingPnSendCompletedEventHandler SetPendingPnSendCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertPN_ApplyLeave", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] InsertPN_ApplyLeave(int requestid) {
            object[] results = this.Invoke("InsertPN_ApplyLeave", new object[] {
                        requestid});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void InsertPN_ApplyLeaveAsync(int requestid) {
            this.InsertPN_ApplyLeaveAsync(requestid, null);
        }
        
        /// <remarks/>
        public void InsertPN_ApplyLeaveAsync(int requestid, object userState) {
            if ((this.InsertPN_ApplyLeaveOperationCompleted == null)) {
                this.InsertPN_ApplyLeaveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertPN_ApplyLeaveOperationCompleted);
            }
            this.InvokeAsync("InsertPN_ApplyLeave", new object[] {
                        requestid}, this.InsertPN_ApplyLeaveOperationCompleted, userState);
        }
        
        private void OnInsertPN_ApplyLeaveOperationCompleted(object arg) {
            if ((this.InsertPN_ApplyLeaveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertPN_ApplyLeaveCompleted(this, new InsertPN_ApplyLeaveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertPN_ApproveLeave", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] InsertPN_ApproveLeave(int requestid) {
            object[] results = this.Invoke("InsertPN_ApproveLeave", new object[] {
                        requestid});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void InsertPN_ApproveLeaveAsync(int requestid) {
            this.InsertPN_ApproveLeaveAsync(requestid, null);
        }
        
        /// <remarks/>
        public void InsertPN_ApproveLeaveAsync(int requestid, object userState) {
            if ((this.InsertPN_ApproveLeaveOperationCompleted == null)) {
                this.InsertPN_ApproveLeaveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertPN_ApproveLeaveOperationCompleted);
            }
            this.InvokeAsync("InsertPN_ApproveLeave", new object[] {
                        requestid}, this.InsertPN_ApproveLeaveOperationCompleted, userState);
        }
        
        private void OnInsertPN_ApproveLeaveOperationCompleted(object arg) {
            if ((this.InsertPN_ApproveLeaveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertPN_ApproveLeaveCompleted(this, new InsertPN_ApproveLeaveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertPN_CancelLeave", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] InsertPN_CancelLeave(int requestid) {
            object[] results = this.Invoke("InsertPN_CancelLeave", new object[] {
                        requestid});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void InsertPN_CancelLeaveAsync(int requestid) {
            this.InsertPN_CancelLeaveAsync(requestid, null);
        }
        
        /// <remarks/>
        public void InsertPN_CancelLeaveAsync(int requestid, object userState) {
            if ((this.InsertPN_CancelLeaveOperationCompleted == null)) {
                this.InsertPN_CancelLeaveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertPN_CancelLeaveOperationCompleted);
            }
            this.InvokeAsync("InsertPN_CancelLeave", new object[] {
                        requestid}, this.InsertPN_CancelLeaveOperationCompleted, userState);
        }
        
        private void OnInsertPN_CancelLeaveOperationCompleted(object arg) {
            if ((this.InsertPN_CancelLeaveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertPN_CancelLeaveCompleted(this, new InsertPN_CancelLeaveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertPN_ApproveCancelLeave", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] InsertPN_ApproveCancelLeave(int requestid) {
            object[] results = this.Invoke("InsertPN_ApproveCancelLeave", new object[] {
                        requestid});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void InsertPN_ApproveCancelLeaveAsync(int requestid) {
            this.InsertPN_ApproveCancelLeaveAsync(requestid, null);
        }
        
        /// <remarks/>
        public void InsertPN_ApproveCancelLeaveAsync(int requestid, object userState) {
            if ((this.InsertPN_ApproveCancelLeaveOperationCompleted == null)) {
                this.InsertPN_ApproveCancelLeaveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertPN_ApproveCancelLeaveOperationCompleted);
            }
            this.InvokeAsync("InsertPN_ApproveCancelLeave", new object[] {
                        requestid}, this.InsertPN_ApproveCancelLeaveOperationCompleted, userState);
        }
        
        private void OnInsertPN_ApproveCancelLeaveOperationCompleted(object arg) {
            if ((this.InsertPN_ApproveCancelLeaveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertPN_ApproveCancelLeaveCompleted(this, new InsertPN_ApproveCancelLeaveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertPN_ApplyCLOT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] InsertPN_ApplyCLOT(int requestid) {
            object[] results = this.Invoke("InsertPN_ApplyCLOT", new object[] {
                        requestid});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void InsertPN_ApplyCLOTAsync(int requestid) {
            this.InsertPN_ApplyCLOTAsync(requestid, null);
        }
        
        /// <remarks/>
        public void InsertPN_ApplyCLOTAsync(int requestid, object userState) {
            if ((this.InsertPN_ApplyCLOTOperationCompleted == null)) {
                this.InsertPN_ApplyCLOTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertPN_ApplyCLOTOperationCompleted);
            }
            this.InvokeAsync("InsertPN_ApplyCLOT", new object[] {
                        requestid}, this.InsertPN_ApplyCLOTOperationCompleted, userState);
        }
        
        private void OnInsertPN_ApplyCLOTOperationCompleted(object arg) {
            if ((this.InsertPN_ApplyCLOTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertPN_ApplyCLOTCompleted(this, new InsertPN_ApplyCLOTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertPN_ApproveRejectCLOT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] InsertPN_ApproveRejectCLOT(int requestid) {
            object[] results = this.Invoke("InsertPN_ApproveRejectCLOT", new object[] {
                        requestid});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void InsertPN_ApproveRejectCLOTAsync(int requestid) {
            this.InsertPN_ApproveRejectCLOTAsync(requestid, null);
        }
        
        /// <remarks/>
        public void InsertPN_ApproveRejectCLOTAsync(int requestid, object userState) {
            if ((this.InsertPN_ApproveRejectCLOTOperationCompleted == null)) {
                this.InsertPN_ApproveRejectCLOTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertPN_ApproveRejectCLOTOperationCompleted);
            }
            this.InvokeAsync("InsertPN_ApproveRejectCLOT", new object[] {
                        requestid}, this.InsertPN_ApproveRejectCLOTOperationCompleted, userState);
        }
        
        private void OnInsertPN_ApproveRejectCLOTOperationCompleted(object arg) {
            if ((this.InsertPN_ApproveRejectCLOTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertPN_ApproveRejectCLOTCompleted(this, new InsertPN_ApproveRejectCLOTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertPN_CancelCLOT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] InsertPN_CancelCLOT(int requestid) {
            object[] results = this.Invoke("InsertPN_CancelCLOT", new object[] {
                        requestid});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void InsertPN_CancelCLOTAsync(int requestid) {
            this.InsertPN_CancelCLOTAsync(requestid, null);
        }
        
        /// <remarks/>
        public void InsertPN_CancelCLOTAsync(int requestid, object userState) {
            if ((this.InsertPN_CancelCLOTOperationCompleted == null)) {
                this.InsertPN_CancelCLOTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertPN_CancelCLOTOperationCompleted);
            }
            this.InvokeAsync("InsertPN_CancelCLOT", new object[] {
                        requestid}, this.InsertPN_CancelCLOTOperationCompleted, userState);
        }
        
        private void OnInsertPN_CancelCLOTOperationCompleted(object arg) {
            if ((this.InsertPN_CancelCLOTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertPN_CancelCLOTCompleted(this, new InsertPN_CancelCLOTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertPN_ApproveRejectCancelCLOT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] InsertPN_ApproveRejectCancelCLOT(int requestid) {
            object[] results = this.Invoke("InsertPN_ApproveRejectCancelCLOT", new object[] {
                        requestid});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void InsertPN_ApproveRejectCancelCLOTAsync(int requestid) {
            this.InsertPN_ApproveRejectCancelCLOTAsync(requestid, null);
        }
        
        /// <remarks/>
        public void InsertPN_ApproveRejectCancelCLOTAsync(int requestid, object userState) {
            if ((this.InsertPN_ApproveRejectCancelCLOTOperationCompleted == null)) {
                this.InsertPN_ApproveRejectCancelCLOTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertPN_ApproveRejectCancelCLOTOperationCompleted);
            }
            this.InvokeAsync("InsertPN_ApproveRejectCancelCLOT", new object[] {
                        requestid}, this.InsertPN_ApproveRejectCancelCLOTOperationCompleted, userState);
        }
        
        private void OnInsertPN_ApproveRejectCancelCLOTOperationCompleted(object arg) {
            if ((this.InsertPN_ApproveRejectCancelCLOTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertPN_ApproveRejectCancelCLOTCompleted(this, new InsertPN_ApproveRejectCancelCLOTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPendingPn", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public t_commonKeyValue_workflow[] GetPendingPn() {
            object[] results = this.Invoke("GetPendingPn", new object[0]);
            return ((t_commonKeyValue_workflow[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPendingPnAsync() {
            this.GetPendingPnAsync(null);
        }
        
        /// <remarks/>
        public void GetPendingPnAsync(object userState) {
            if ((this.GetPendingPnOperationCompleted == null)) {
                this.GetPendingPnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPendingPnOperationCompleted);
            }
            this.InvokeAsync("GetPendingPn", new object[0], this.GetPendingPnOperationCompleted, userState);
        }
        
        private void OnGetPendingPnOperationCompleted(object arg) {
            if ((this.GetPendingPnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPendingPnCompleted(this, new GetPendingPnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetPendingPnSend", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetPendingPnSend(int pnid) {
            this.Invoke("SetPendingPnSend", new object[] {
                        pnid});
        }
        
        /// <remarks/>
        public void SetPendingPnSendAsync(int pnid) {
            this.SetPendingPnSendAsync(pnid, null);
        }
        
        /// <remarks/>
        public void SetPendingPnSendAsync(int pnid, object userState) {
            if ((this.SetPendingPnSendOperationCompleted == null)) {
                this.SetPendingPnSendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPendingPnSendOperationCompleted);
            }
            this.InvokeAsync("SetPendingPnSend", new object[] {
                        pnid}, this.SetPendingPnSendOperationCompleted, userState);
        }
        
        private void OnSetPendingPnSendOperationCompleted(object arg) {
            if ((this.SetPendingPnSendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetPendingPnSendCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class t_commonKeyValue_workflow {
        
        private MobileDeviceInfo[] mobileinfoField;
        
        private t_commonKeyValue commonKeyValueField;
        
        /// <remarks/>
        public MobileDeviceInfo[] mobileinfo {
            get {
                return this.mobileinfoField;
            }
            set {
                this.mobileinfoField = value;
            }
        }
        
        /// <remarks/>
        public t_commonKeyValue commonKeyValue {
            get {
                return this.commonKeyValueField;
            }
            set {
                this.commonKeyValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class MobileDeviceInfo {
        
        private string deviceidField;
        
        private string unameField;
        
        private int devicetypeField;
        
        /// <remarks/>
        public string deviceid {
            get {
                return this.deviceidField;
            }
            set {
                this.deviceidField = value;
            }
        }
        
        /// <remarks/>
        public string uname {
            get {
                return this.unameField;
            }
            set {
                this.unameField = value;
            }
        }
        
        /// <remarks/>
        public int devicetype {
            get {
                return this.devicetypeField;
            }
            set {
                this.devicetypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class t_commonKeyValue {
        
        private int idField;
        
        private string typeCodeField;
        
        private string keyStrField;
        
        private string valueStrField;
        
        private string remarkField;
        
        private System.DateTime createDateField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string TypeCode {
            get {
                return this.typeCodeField;
            }
            set {
                this.typeCodeField = value;
            }
        }
        
        /// <remarks/>
        public string KeyStr {
            get {
                return this.keyStrField;
            }
            set {
                this.keyStrField = value;
            }
        }
        
        /// <remarks/>
        public string ValueStr {
            get {
                return this.valueStrField;
            }
            set {
                this.valueStrField = value;
            }
        }
        
        /// <remarks/>
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreateDate {
            get {
                return this.createDateField;
            }
            set {
                this.createDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertPN_ApplyLeaveCompletedEventHandler(object sender, InsertPN_ApplyLeaveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertPN_ApplyLeaveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertPN_ApplyLeaveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertPN_ApproveLeaveCompletedEventHandler(object sender, InsertPN_ApproveLeaveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertPN_ApproveLeaveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertPN_ApproveLeaveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertPN_CancelLeaveCompletedEventHandler(object sender, InsertPN_CancelLeaveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertPN_CancelLeaveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertPN_CancelLeaveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertPN_ApproveCancelLeaveCompletedEventHandler(object sender, InsertPN_ApproveCancelLeaveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertPN_ApproveCancelLeaveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertPN_ApproveCancelLeaveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertPN_ApplyCLOTCompletedEventHandler(object sender, InsertPN_ApplyCLOTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertPN_ApplyCLOTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertPN_ApplyCLOTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertPN_ApproveRejectCLOTCompletedEventHandler(object sender, InsertPN_ApproveRejectCLOTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertPN_ApproveRejectCLOTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertPN_ApproveRejectCLOTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertPN_CancelCLOTCompletedEventHandler(object sender, InsertPN_CancelCLOTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertPN_CancelCLOTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertPN_CancelCLOTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertPN_ApproveRejectCancelCLOTCompletedEventHandler(object sender, InsertPN_ApproveRejectCancelCLOTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertPN_ApproveRejectCancelCLOTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertPN_ApproveRejectCancelCLOTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetPendingPnCompletedEventHandler(object sender, GetPendingPnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPendingPnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPendingPnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public t_commonKeyValue_workflow[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((t_commonKeyValue_workflow[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SetPendingPnSendCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591