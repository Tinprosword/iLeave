//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace WebServiceLayer.WebReference_workflow {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WorkflowV2Soap", Namespace="http://tempuri.org/")]
    public partial class WorkflowV2 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CreateNewRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback ApproveRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback RejectRequestOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WorkflowV2() {
            this.Url = global::WebServiceLayer.Properties.Settings.Default.WebServiceLayer_WebReference_workflow_WorkflowV2;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CreateNewRequestCompletedEventHandler CreateNewRequestCompleted;
        
        /// <remarks/>
        public event ApproveRequestCompletedEventHandler ApproveRequestCompleted;
        
        /// <remarks/>
        public event CancelRequestCompletedEventHandler CancelRequestCompleted;
        
        /// <remarks/>
        public event RejectRequestCompletedEventHandler RejectRequestCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateNewRequest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateNewRequest(MyWorkflowTask p_ExistingWorkflowTask, WorkflowTypeID TaskType, object p_ApprovalRequest, int createrUID, string p_strDescription, string p_strFormulatedURL, string baseURL, string p_strWorkflowInfoParameter, int p_intLeaveRequestID, int p_intEmploymentID) {
            object[] results = this.Invoke("CreateNewRequest", new object[] {
                        p_ExistingWorkflowTask,
                        TaskType,
                        p_ApprovalRequest,
                        createrUID,
                        p_strDescription,
                        p_strFormulatedURL,
                        baseURL,
                        p_strWorkflowInfoParameter,
                        p_intLeaveRequestID,
                        p_intEmploymentID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateNewRequestAsync(MyWorkflowTask p_ExistingWorkflowTask, WorkflowTypeID TaskType, object p_ApprovalRequest, int createrUID, string p_strDescription, string p_strFormulatedURL, string baseURL, string p_strWorkflowInfoParameter, int p_intLeaveRequestID, int p_intEmploymentID) {
            this.CreateNewRequestAsync(p_ExistingWorkflowTask, TaskType, p_ApprovalRequest, createrUID, p_strDescription, p_strFormulatedURL, baseURL, p_strWorkflowInfoParameter, p_intLeaveRequestID, p_intEmploymentID, null);
        }
        
        /// <remarks/>
        public void CreateNewRequestAsync(MyWorkflowTask p_ExistingWorkflowTask, WorkflowTypeID TaskType, object p_ApprovalRequest, int createrUID, string p_strDescription, string p_strFormulatedURL, string baseURL, string p_strWorkflowInfoParameter, int p_intLeaveRequestID, int p_intEmploymentID, object userState) {
            if ((this.CreateNewRequestOperationCompleted == null)) {
                this.CreateNewRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewRequestOperationCompleted);
            }
            this.InvokeAsync("CreateNewRequest", new object[] {
                        p_ExistingWorkflowTask,
                        TaskType,
                        p_ApprovalRequest,
                        createrUID,
                        p_strDescription,
                        p_strFormulatedURL,
                        baseURL,
                        p_strWorkflowInfoParameter,
                        p_intLeaveRequestID,
                        p_intEmploymentID}, this.CreateNewRequestOperationCompleted, userState);
        }
        
        private void OnCreateNewRequestOperationCompleted(object arg) {
            if ((this.CreateNewRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewRequestCompleted(this, new CreateNewRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ApproveRequest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ApproveRequest(MyWorkflowTask WorkflowTaskObject, WorkflowTypeID TaskType, object p_ApprovalRequest, int UserID, string Description, string FormulatedURL, string baseURL) {
            this.Invoke("ApproveRequest", new object[] {
                        WorkflowTaskObject,
                        TaskType,
                        p_ApprovalRequest,
                        UserID,
                        Description,
                        FormulatedURL,
                        baseURL});
        }
        
        /// <remarks/>
        public void ApproveRequestAsync(MyWorkflowTask WorkflowTaskObject, WorkflowTypeID TaskType, object p_ApprovalRequest, int UserID, string Description, string FormulatedURL, string baseURL) {
            this.ApproveRequestAsync(WorkflowTaskObject, TaskType, p_ApprovalRequest, UserID, Description, FormulatedURL, baseURL, null);
        }
        
        /// <remarks/>
        public void ApproveRequestAsync(MyWorkflowTask WorkflowTaskObject, WorkflowTypeID TaskType, object p_ApprovalRequest, int UserID, string Description, string FormulatedURL, string baseURL, object userState) {
            if ((this.ApproveRequestOperationCompleted == null)) {
                this.ApproveRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApproveRequestOperationCompleted);
            }
            this.InvokeAsync("ApproveRequest", new object[] {
                        WorkflowTaskObject,
                        TaskType,
                        p_ApprovalRequest,
                        UserID,
                        Description,
                        FormulatedURL,
                        baseURL}, this.ApproveRequestOperationCompleted, userState);
        }
        
        private void OnApproveRequestOperationCompleted(object arg) {
            if ((this.ApproveRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ApproveRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelRequest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CancelRequest(MyWorkflowTask WorkflowTaskObject, WorkflowTypeID TaskType, object p_ApprovalRequest, int UserID, string Description, string FormulatedURL, string baseURL) {
            this.Invoke("CancelRequest", new object[] {
                        WorkflowTaskObject,
                        TaskType,
                        p_ApprovalRequest,
                        UserID,
                        Description,
                        FormulatedURL,
                        baseURL});
        }
        
        /// <remarks/>
        public void CancelRequestAsync(MyWorkflowTask WorkflowTaskObject, WorkflowTypeID TaskType, object p_ApprovalRequest, int UserID, string Description, string FormulatedURL, string baseURL) {
            this.CancelRequestAsync(WorkflowTaskObject, TaskType, p_ApprovalRequest, UserID, Description, FormulatedURL, baseURL, null);
        }
        
        /// <remarks/>
        public void CancelRequestAsync(MyWorkflowTask WorkflowTaskObject, WorkflowTypeID TaskType, object p_ApprovalRequest, int UserID, string Description, string FormulatedURL, string baseURL, object userState) {
            if ((this.CancelRequestOperationCompleted == null)) {
                this.CancelRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelRequestOperationCompleted);
            }
            this.InvokeAsync("CancelRequest", new object[] {
                        WorkflowTaskObject,
                        TaskType,
                        p_ApprovalRequest,
                        UserID,
                        Description,
                        FormulatedURL,
                        baseURL}, this.CancelRequestOperationCompleted, userState);
        }
        
        private void OnCancelRequestOperationCompleted(object arg) {
            if ((this.CancelRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RejectRequest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RejectRequest(MyWorkflowTask WorkflowTaskObject, WorkflowTypeID TaskType, object p_ApprovalRequest, int UserID, string p_strDescription, string FormulatedURL, string baseURL) {
            this.Invoke("RejectRequest", new object[] {
                        WorkflowTaskObject,
                        TaskType,
                        p_ApprovalRequest,
                        UserID,
                        p_strDescription,
                        FormulatedURL,
                        baseURL});
        }
        
        /// <remarks/>
        public void RejectRequestAsync(MyWorkflowTask WorkflowTaskObject, WorkflowTypeID TaskType, object p_ApprovalRequest, int UserID, string p_strDescription, string FormulatedURL, string baseURL) {
            this.RejectRequestAsync(WorkflowTaskObject, TaskType, p_ApprovalRequest, UserID, p_strDescription, FormulatedURL, baseURL, null);
        }
        
        /// <remarks/>
        public void RejectRequestAsync(MyWorkflowTask WorkflowTaskObject, WorkflowTypeID TaskType, object p_ApprovalRequest, int UserID, string p_strDescription, string FormulatedURL, string baseURL, object userState) {
            if ((this.RejectRequestOperationCompleted == null)) {
                this.RejectRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRejectRequestOperationCompleted);
            }
            this.InvokeAsync("RejectRequest", new object[] {
                        WorkflowTaskObject,
                        TaskType,
                        p_ApprovalRequest,
                        UserID,
                        p_strDescription,
                        FormulatedURL,
                        baseURL}, this.RejectRequestOperationCompleted, userState);
        }
        
        private void OnRejectRequestOperationCompleted(object arg) {
            if ((this.RejectRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RejectRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class MyWorkflowTask {
        
        private int idField;
        
        private int userIDField;
        
        private int inOutTypeIDField;
        
        private int typeIDField;
        
        private int workflowInfoIDField;
        
        private int currentStepField;
        
        private string typeNameField;
        
        private string descriptionField;
        
        private string formulatedURLField;
        
        private int leaveRequestIDField;
        
        private System.DateTime modifiedDateField;
        
        private int modifiedUserField;
        
        private System.DateTime createDateField;
        
        private int createUserField;
        
        private bool isReadField;
        
        private string remarkField;
        
        private string fromUserNameField;
        
        private int statusField;
        
        private int employmentIDField;
        
        private string positionDescriptionField;
        
        private string toUserNameField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public int InOutTypeID {
            get {
                return this.inOutTypeIDField;
            }
            set {
                this.inOutTypeIDField = value;
            }
        }
        
        /// <remarks/>
        public int TypeID {
            get {
                return this.typeIDField;
            }
            set {
                this.typeIDField = value;
            }
        }
        
        /// <remarks/>
        public int WorkflowInfoID {
            get {
                return this.workflowInfoIDField;
            }
            set {
                this.workflowInfoIDField = value;
            }
        }
        
        /// <remarks/>
        public int CurrentStep {
            get {
                return this.currentStepField;
            }
            set {
                this.currentStepField = value;
            }
        }
        
        /// <remarks/>
        public string TypeName {
            get {
                return this.typeNameField;
            }
            set {
                this.typeNameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string FormulatedURL {
            get {
                return this.formulatedURLField;
            }
            set {
                this.formulatedURLField = value;
            }
        }
        
        /// <remarks/>
        public int LeaveRequestID {
            get {
                return this.leaveRequestIDField;
            }
            set {
                this.leaveRequestIDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ModifiedDate {
            get {
                return this.modifiedDateField;
            }
            set {
                this.modifiedDateField = value;
            }
        }
        
        /// <remarks/>
        public int ModifiedUser {
            get {
                return this.modifiedUserField;
            }
            set {
                this.modifiedUserField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreateDate {
            get {
                return this.createDateField;
            }
            set {
                this.createDateField = value;
            }
        }
        
        /// <remarks/>
        public int CreateUser {
            get {
                return this.createUserField;
            }
            set {
                this.createUserField = value;
            }
        }
        
        /// <remarks/>
        public bool IsRead {
            get {
                return this.isReadField;
            }
            set {
                this.isReadField = value;
            }
        }
        
        /// <remarks/>
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        public string FromUserName {
            get {
                return this.fromUserNameField;
            }
            set {
                this.fromUserNameField = value;
            }
        }
        
        /// <remarks/>
        public int Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public int EmploymentID {
            get {
                return this.employmentIDField;
            }
            set {
                this.employmentIDField = value;
            }
        }
        
        /// <remarks/>
        public string PositionDescription {
            get {
                return this.positionDescriptionField;
            }
            set {
                this.positionDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string ToUserName {
            get {
                return this.toUserNameField;
            }
            set {
                this.toUserNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum WorkflowTypeID {
        
        /// <remarks/>
        LEAVE_APPLICATION,
        
        /// <remarks/>
        UPDATE_PERSON_INFO,
        
        /// <remarks/>
        UPDATE_TRAINING_RECORD,
        
        /// <remarks/>
        UPDATE_QUALIFICATION_RECORD,
        
        /// <remarks/>
        PAYROLL_LOCK,
        
        /// <remarks/>
        CLOT_APPLICATION,
        
        /// <remarks/>
        OT_APPROVAL,
        
        /// <remarks/>
        MEDICAL_CLAIM,
        
        /// <remarks/>
        ATTENDANCE,
        
        /// <remarks/>
        DOCTOR_VISIT,
        
        /// <remarks/>
        CANCEL_LEAVE_APPLICATION,
        
        /// <remarks/>
        EXPENSE_CLAIM,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CreateNewRequestCompletedEventHandler(object sender, CreateNewRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateNewRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ApproveRequestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CancelRequestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void RejectRequestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591